/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * cabSpeed.java
 *
 * Created on Jan 14, 2012, 5:23:13 PM
 */

package traffic_alerts;

import com.mongodb.Mongo;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import de.javasoft.plaf.synthetica.SyntheticaBlackMoonLookAndFeel;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Vector;
import javax.swing.UIManager;
import org.smslib.OutboundMessage;
import org.smslib.Service;
import org.smslib.modem.SerialModemGateway;
import javax.swing.JOptionPane;
import org.openstreetmap.gui.jmapviewer.MapMarkerCross;
import org.openstreetmap.gui.jmapviewer.OsmMercator;
import org.openstreetmap.gui.jmapviewer.interfaces.MapMarker;
import org.openstreetmap.gui.jmapviewer.interfaces.TileCache;
import org.openstreetmap.gui.jmapviewer.interfaces.TileLoader;
import org.openstreetmap.gui.jmapviewer.interfaces.TileSource;


public class cabSpeed extends javax.swing.JFrame {

    /** Creates new form cabSpeed */
    public cabSpeed() {
        initComponents();
    }
    MapMarkerCross mD;
    DB_Access db;
    public int a3= 0;
    public int a1= 1;
    public int stposition;
    public int endposition;
    public int direction  = 1;
    public static String locationNo1 = "";
    public static String locationNo2 = "";
    protected List<MapMarker> mapMarkerList;
    protected boolean mapMarkersVisible;
    protected boolean tileGridVisible;
    public static final int MAX_ZOOM = 22;
    public static final int MIN_ZOOM = 0;
    
    protected TileLoader tileLoader;
    protected TileCache tileCache;
    protected TileSource tileSource;

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DialogMeaasge = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        txtSendNum = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtRout = new javax.swing.JTextField();
        cmbFrom1 = new javax.swing.JComboBox();
        cmbTo1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtFromLong = new javax.swing.JTextField();
        txtFromLatd = new javax.swing.JTextField();
        txtToLong = new javax.swing.JTextField();
        txtToLatd = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtDistance = new javax.swing.JTextField();
        txtCost = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtAvgSpeed = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        prg1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();

        DialogMeaasge.setName("DialogMeaasge"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        txtMessage.setColumns(20);
        txtMessage.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        txtMessage.setRows(5);
        txtMessage.setName("txtMessage"); // NOI18N
        jScrollPane3.setViewportView(txtMessage);

        txtSendNum.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtSendNum.setName("txtSendNum"); // NOI18N

        jLabel2.setText("To");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel11.setText("Message :");
        jLabel11.setName("jLabel11"); // NOI18N

        jButton5.setText("Send");
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Cancel");
        jButton6.setName("jButton6"); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DialogMeaasgeLayout = new javax.swing.GroupLayout(DialogMeaasge.getContentPane());
        DialogMeaasge.getContentPane().setLayout(DialogMeaasgeLayout);
        DialogMeaasgeLayout.setHorizontalGroup(
            DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogMeaasgeLayout.createSequentialGroup()
                .addGroup(DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(DialogMeaasgeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, DialogMeaasgeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSendNum)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        DialogMeaasgeLayout.setVerticalGroup(
            DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogMeaasgeLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DialogMeaasgeLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel11))
                    .addGroup(DialogMeaasgeLayout.createSequentialGroup()
                        .addComponent(txtSendNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DialogMeaasgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setTitle("Traffic Solutions");
        setBackground(new java.awt.Color(102, 102, 102));
        setBounds(new java.awt.Rectangle(290, 30, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 153));
        jLabel1.setText(" ULTIMATE SOLUTION FOR TRAFFIC ALERTS");
        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setBackground(new java.awt.Color(153, 255, 153));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATAPOINT", "LONGTITUDE", "LATITUDE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 380, 110));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(" FROM");
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, 20));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText(" ROUT NO");
        jLabel4.setName("jLabel4"); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText(" TO");
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 210, -1, -1));

        txtRout.setEditable(false);
        txtRout.setName("txtRout"); // NOI18N
        jPanel1.add(txtRout, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 120, -1));

        cmbFrom1.setBackground(new java.awt.Color(204, 204, 204));
        cmbFrom1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "katubedda-1", "rathmalana-2", "mt.lavinia-3", "dehiwala-4", "wallawatte-5", "bambalapitiya-6", "kollpitiya-7", "pettah-8", "fort-9" }));
        cmbFrom1.setName("cmbFrom1"); // NOI18N
        cmbFrom1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFrom1ItemStateChanged(evt);
            }
        });
        cmbFrom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFrom1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmbFrom1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 130, -1));

        cmbTo1.setBackground(new java.awt.Color(204, 204, 204));
        cmbTo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "katubedda-1", "rathmalana-2", "mt.lavinia-3", "dehiwala-4", "wallawatte-5", "bambalapitiya-6", "kollpitiya-7", "pettah-8", "fort-9" }));
        cmbTo1.setName("cmbTo1"); // NOI18N
        cmbTo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTo1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmbTo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 210, 170, -1));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("LONGTITUDE");
        jLabel7.setName("jLabel7"); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("LATITUDE");
        jLabel8.setName("jLabel8"); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        txtFromLong.setEditable(false);
        txtFromLong.setName("txtFromLong"); // NOI18N
        jPanel1.add(txtFromLong, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, 140, -1));

        txtFromLatd.setEditable(false);
        txtFromLatd.setName("txtFromLatd"); // NOI18N
        jPanel1.add(txtFromLatd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 140, -1));

        txtToLong.setEditable(false);
        txtToLong.setName("txtToLong"); // NOI18N
        jPanel1.add(txtToLong, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, 170, -1));

        txtToLatd.setEditable(false);
        txtToLatd.setName("txtToLatd"); // NOI18N
        jPanel1.add(txtToLatd, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 310, 170, -1));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("LONGTITUDE");
        jLabel9.setName("jLabel9"); // NOI18N
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, -1, -1));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("LATITUDE");
        jLabel10.setName("jLabel10"); // NOI18N
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 310, -1, -1));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Search5.png"))); // NOI18N
        btnSearch.setContentAreaFilled(false);
        btnSearch.setName("btnSearch"); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 130, 100));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Go.png"))); // NOI18N
        jButton7.setContentAreaFilled(false);
        jButton7.setName("jButton7"); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 140, 110));

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add.png"))); // NOI18N
        jButton8.setContentAreaFilled(false);
        jButton8.setName("jButton8"); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 130, 110));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/server.png"))); // NOI18N
        jButton4.setContentAreaFilled(false);
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 160, 110));

        txtDistance.setBackground(new java.awt.Color(51, 51, 51));
        txtDistance.setEditable(false);
        txtDistance.setText(" ");
        txtDistance.setName("txtDistance"); // NOI18N
        jPanel1.add(txtDistance, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 160, 0, -1));

        txtCost.setBackground(new java.awt.Color(51, 51, 51));
        txtCost.setEditable(false);
        txtCost.setName("txtCost"); // NOI18N
        jPanel1.add(txtCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 170, 0, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 780, 340));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(" AVERAGE SPEED");
        jLabel6.setName("jLabel6"); // NOI18N
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        txtAvgSpeed.setEditable(false);
        txtAvgSpeed.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtAvgSpeed.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAvgSpeed.setName("txtAvgSpeed"); // NOI18N
        txtAvgSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvgSpeedActionPerformed(evt);
            }
        });
        jPanel2.add(txtAvgSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 190, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 10, 110, 100));

        jButton2.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Gmail.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 160, 100));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Maps.png"))); // NOI18N
        jButton3.setContentAreaFilled(false);
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 100, 100));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 550, 780, 120));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setBackground(new java.awt.Color(153, 255, 153));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CAB NO", "LONGTITUDE - CAB", "LATITUDE - CAB", "SPEED"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setName("jTable2"); // NOI18N
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 440, 400, 110));

        jTextField1.setBackground(new java.awt.Color(0, 0, 255));
        jTextField1.setName("jTextField1"); // NOI18N
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 20, 20));

        jTextField3.setBackground(new java.awt.Color(0, 0, 255));
        jTextField3.setName("jTextField3"); // NOI18N
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 20, -1));

        jTextField4.setBackground(new java.awt.Color(0, 0, 255));
        jTextField4.setName("jTextField4"); // NOI18N
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 20, -1));

        jTextField5.setBackground(new java.awt.Color(0, 0, 255));
        jTextField5.setName("jTextField5"); // NOI18N
        getContentPane().add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 20, -1));

        jTextField6.setBackground(new java.awt.Color(0, 0, 255));
        jTextField6.setName("jTextField6"); // NOI18N
        getContentPane().add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 20, -1));

        jTextField7.setBackground(new java.awt.Color(0, 0, 255));
        jTextField7.setName("jTextField7"); // NOI18N
        getContentPane().add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 20, -1));

        jTextField8.setBackground(new java.awt.Color(0, 0, 255));
        jTextField8.setName("jTextField8"); // NOI18N
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 20, -1));

        jTextField9.setBackground(new java.awt.Color(0, 0, 255));
        jTextField9.setName("jTextField9"); // NOI18N
        getContentPane().add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, 20, -1));

        jTextField10.setBackground(new java.awt.Color(0, 0, 255));
        jTextField10.setName("jTextField10"); // NOI18N
        getContentPane().add(jTextField10, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 70, 20, -1));

        jTextField11.setBackground(new java.awt.Color(0, 0, 255));
        jTextField11.setName("jTextField11"); // NOI18N
        getContentPane().add(jTextField11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 20, -1));

        prg1.setName("prg1"); // NOI18N
        getContentPane().add(prg1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 0, 20));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setName("jPanel3"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 780, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTo1ActionPerformed
        String locationNo2 = cmbTo1.getSelectedItem().toString().split("-")[0];

        try {
            String query = "SELECT * FROM longlatd WHERE location ='"+locationNo2+"'";

            Connection conn = DBConnector.getMyConnection();
            Statement stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()){
            txtToLong.setText(""+rs.getDouble("long"));
            txtToLatd.setText(""+rs.getDouble("latd"));
            txtDistance.setText(""+rs.getDouble("distance"));

            }

        } catch (Exception e) {
        }
        
// Haversine algorithm for getting the distance in Km using Longitudes and Latitudes
        final double  R = 6372.8;

        Double fromLatd = Double.parseDouble(txtFromLatd.getText());
        Double fromLong = Double.parseDouble(txtFromLong.getText());
        Double toLatd = Double.parseDouble(txtToLatd.getText());
        Double toLong = Double.parseDouble(txtToLong.getText());

        Double latDistance = toRad(toLatd-fromLatd);
        Double lonDistance = toRad(toLong-fromLong);

        Double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2) + Math.cos(toRad(fromLatd)) * Math.cos(toRad(toLatd)) * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
        Double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        Double distance = (R * c)/77;
        DecimalFormat dataFormat = new DecimalFormat("#.#");
        //System.out.println(dataFormat.format(distance));

// Calculating the cost

        //Double distance = Double.parseDouble(txtDistance.getText());

        if (distance>1){
            int cost = 50;
            distance --;
            System.out.println(distance);
            
                for(double i=0.0;i<distance;i=i+0.1){
                    cost = cost + 3;
                }

        System.out.println(cost);
        txtCost.setText(Integer.toString(cost));
        }

    }//GEN-LAST:event_cmbTo1ActionPerformed

     private static Double toRad(Double value) {

        return value * Math.PI / 180;
    }



    private void cmbFrom1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFrom1ItemStateChanged
      
    }//GEN-LAST:event_cmbFrom1ItemStateChanged

    private void cmbFrom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFrom1ActionPerformed
        String locationNo1 = cmbFrom1.getSelectedItem().toString().split("-")[0];

        try {
            String query = "SELECT * FROM longlatd WHERE location ='"+locationNo1+"'";

            Connection conn = DBConnector.getMyConnection();
            Statement stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()){
            txtFromLong.setText(""+rs.getDouble("long"));
            txtFromLatd.setText(""+rs.getDouble("latd"));

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cmbFrom1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        a3 = 10;
        a1 = 10;
        DefaultTableModel df = (DefaultTableModel) jTable2.getModel();

        while (df.getRowCount()>0) {
            df.removeRow(0);
            }
        txtFromLatd.setText(null);
        txtFromLong.setText(null);
        txtToLatd.setText(null);
        txtToLong.setText(null);
        this.dispose();
        new cabSpeed().setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        org.openstreetmap.gui.jmapviewer.Demo ss = new org.openstreetmap.gui.jmapviewer.Demo();
        ss.setVisible(true);
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       //getting the direction

        try {
            //getting the start position number from database
            System.out.println("aiyoo");
            String querystp = "SELECT * FROM longlatd WHERE location = '"+mainSystem.cmbFrom.getSelectedItem().toString().split("-")[0]+"'";
            ResultSet rs1 = db.getData(querystp);
            System.out.println("stp"+rs1.next());
            if(rs1.next()){
                System.out.println("aiyooo");
                stposition = rs1.getInt("position_no");
                System.out.println("stposition"+stposition);
            }
            
            //getting the end position number from database 
            String queryendp = "SELECT * FROM longlatd WHERE location = '"+mainSystem.cmbTo.getSelectedItem().toString().split("-")[0]+"'";
            ResultSet rs2 = db.getData(queryendp);
            System.out.println("ammoo");
            System.out.println("endp"+rs2.next());
            if(rs2.next()){
            endposition = rs2.getInt("position_no");
            System.out.println("stposition"+endposition);
            }

            if(stposition<endposition){
            direction = 1;
            }else if(stposition>endposition){
            direction = -1;
            }


        } catch (Exception e) {
            e.printStackTrace();
        }
        cmbFrom1.setSelectedItem(mainSystem.cmbFrom.getSelectedItem());
       cmbTo1.setSelectedItem(mainSystem.cmbTo.getSelectedItem());
    }//GEN-LAST:event_formWindowOpened

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
 new Thread (new Runnable() {

            public void run() {
              try {
                
                  while(a3<5){
// gettng the From Point
    Double FromLong = Double.parseDouble(txtFromLong.getText());
    Double FromLatd = Double.parseDouble(txtFromLatd.getText());
    Double FromPoint = (FromLong+FromLatd)/2;

 // Getting To Point
    Double ToLong = Double.parseDouble(txtToLong.getText());
    Double ToLatd = Double.parseDouble(txtToLatd.getText());
    Double ToPoint = (ToLong+ToLatd)/2;
        System.out.println(FromPoint);
        System.out.println(ToPoint);
       DefaultTableModel df = (DefaultTableModel) jTable2.getModel();
       Connection conn = DBConnector.getMyConnection();
 //cleaning cabSpeed table
        while (df.getRowCount()>0) {

        df.removeRow(0);
 }
//     DefaultTableModel df1 = (DefaultTableModel) jTable1.getModel();
 //cleaning datapoint table
//      while (df1.getRowCount()>0) {
//
//df1.removeRow(0);
// }
 //adding databpint thable to values
//     String query3 ="SELECT * FROM datapoints WHERE point >'"+FromPoint+"' AND  point < '"+ToPoint+"'";
//     ResultSet rs3 = conn.createStatement().executeQuery(query3);
//     while(rs3.next()){
//       Vector v = new Vector();
//         v.add(rs3.getString("dpname"));
//          v.add(rs3.getString("long"));
//           v.add(rs3.getString("latd"));
//
//         df1.addRow(v);
//     }

 //No of cabs
       int NoOfCabs = 0;
       Double TotSpeed = 0.0;
       Double AvgSpeed = 0.0;
      
       String query1 = "SELECT * FROM speed WHERE (point >'"+FromPoint+"' AND  point < '"+ToPoint+"') OR (point <'"+FromPoint+"' AND  point > '"+ToPoint+"') ";
       ResultSet rs = conn.createStatement().executeQuery(query1);
       System.out.println("rscheck"+rs.next());
       while(rs.next()){
           NoOfCabs = NoOfCabs+1;
           if(NoOfCabs<=1){
               NoOfCabs = 2;

           }
           System.out.println("no"+NoOfCabs);
       }

//adding values to cabSpeed Table
        System.out.println("aiyoo");
        String query = "SELECT * FROM speed WHERE (point <'"+FromPoint+"' AND  point > '"+ToPoint+"') OR (point >'"+FromPoint+"' AND  point < '"+ToPoint+"')  ";
       
        ResultSet rs1 = conn.createStatement().executeQuery(query);
        System.out.println(rs1.next());
        while (rs1.next()){
            Vector v = new Vector();
            v.add(rs1.getString("cab_no"));
            v.add(rs1.getString("longt"));
            v.add(rs1.getString("latd"));
           v.add(rs1.getString("speed"));
           
//Calculating average speed
            Double Speed = Double.parseDouble(rs1.getString("speed"));
            TotSpeed = TotSpeed + Speed;

            System.out.println("totspeed"+TotSpeed);
            System.out.println("appoooo");
            df.addRow(v);
        }
       
        AvgSpeed = TotSpeed/(NoOfCabs-1)*1000;
        DecimalFormat dataFormat = new DecimalFormat("#.##");
        txtAvgSpeed.setText(dataFormat.format(AvgSpeed));
        AvgSpeed=   0.00;
        TotSpeed=  0.0;
         Thread.sleep(5000);
         a3++;
                  }
        } catch (Exception e) {
            e.printStackTrace();
        }
            }
        }).start();



      //  txtRout.setText("100");

//Calculating the cost
//       try {
//            String query = "SELECT * FROM longlatd WHERE location ='"+locationNo1+"'";
//
//            Connection conn = DBConnector.getMyConnection();
//            Statement stmt = conn.createStatement();
//
//            ResultSet rs = stmt.executeQuery(query);
//        double  distance = 10;
//        if (distance>1){
//        distance --;
//        int cost = 50;
//        for(int i=0;i<distance;i++){
//        cost = cost + 30;
//
//
//        }
//        System.out.println(cost);
//        }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 try {
     //variables
        String path = "";
        String message;
        String msgNoTraffic = "Speed is '"+txtAvgSpeed.getText()+"' No traffic\nHave a safe journey ";
        String msgTraffic = "Traffic exist use this alternative rout "+path+"";
        int count = 0 , count1 = 0;
        Double best = 0.00;
        Double bestPath,a1 = 0.00;
        String a2 = "";

        //
        if(Double.parseDouble(txtAvgSpeed.getText())>40.0){
        message = msgNoTraffic;
        System.out.println(message);
        txtMessage.setText("Speed is '"+txtAvgSpeed.getText()+"'\nNo traffic\nHave a safe journey\nCost is '"+txtCost.getText()+"' LKR");
        }
        else{
        String query0 = "DELETE FROM alter1";
        db.setData(query0);
        String query = "SELECT * FROM alter_road WHERE rout LIKE '%"+txtRout.getText()+"%' AND (direction = '"+direction+"' OR direction = 0) AND stposition = '"+cmbFrom1.getSelectedItem()+"'";
        ResultSet rs = db.getData(query);

        //retrieving all the avilable alternative routs

        while (rs.next()){
            System.out.println("Connect  "+rs.getString("connect"));
            String query1 = "SELECT * FROM alter_road WHERE connect = '"+rs.getString("connect")+"'";
            ResultSet rs1 = db.getData(query1);

        //caculating best alternative rout

        while(rs1.next()){
            System.out.println("count "+count);
            count= count+1;
            best = best + calc(rs1.getString("avg_speed"),rs1.getString("distance"));
            System.out.println("best "+best);
            System.out.println("road name : "+rs1.getString("road_name"));
            String query2 = "INSERT INTO alter1 VALUES (0,'"+rs1.getString("road_name")+"',"+count1+")";
            db.setData(query2);
                          }
            System.out.println(count);
            bestPath = best/count;
            best = 0.00;
            count  = 0;

        if(a1<bestPath){
            a1 = bestPath;
            a2 = count1+" "+a1;
            }

           count1=count1+1;

            }

        String c1 = a2.toString().split(" ")[0];
        System.out.println(c1);
        // String querybest = "SELECT * FROM alter1 WHERE count = '"+c1+"' ";
        // ResultSet rs4 = db.getData(querybest);
        //     System.out.println(rs4.next());
        //     if(rs4.next()){
        //     path = rs4.getString("road_name");
        //     }
        String querybest1 = "SELECT * FROM alter1 WHERE count = '"+c1+"' ";
        ResultSet rs5 = db.getData(querybest1);

        while(rs5.next()){
            path = path+" >>> "+rs5.getString("road_name");
            }

//filtering the best alternative rout

        String pathfilter = path.toString().split(" ")[0];
        if(pathfilter.equals("and")){
        path = path.toString().split(" ")[1];
        }
        System.out.println(path);
        msgTraffic = "Traffic exist use this alternative rout : "+path+"";
        System.out.println(msgTraffic);
        txtMessage.setText("Traffic exists!\nuse this alternative rout:\n"+path+"");
        }

        } catch (Exception e) {
        e.printStackTrace();
        }
        //Double Speed =Double.parseDouble(txtAvgSpeed.getText());
////smsSender sms = new smsSender();
////sms.setVisible(true);
//
//        if(Speed<0.15){
//         txtMessage.setText("Speed is "+Speed+"Do not usethis path");
//
//        }else if(Speed>0.15){
//         txtMessage.setText("Speed is "+Speed+" no traffic");
//        }
//
//
//
//
        DialogMeaasge.setSize(500, 400);
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final Dimension screenSize = toolkit.getScreenSize();
        final int x = (screenSize.width - DialogMeaasge.getWidth()) / 2;
        final int y = (screenSize.height - DialogMeaasge.getHeight()) / 2;
        DialogMeaasge.setLocation(x, y);
        DialogMeaasge.setVisible(true);





    }//GEN-LAST:event_jButton2ActionPerformed

    Double calc(String speed,String distance){
    Double Speed = Double.parseDouble(speed);
    Double Distance = Double.parseDouble(distance);
    Double ans = Speed/Distance;
    return ans;
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      DialogMeaasge.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
          jTextField1.setVisible(false);
          jTextField3.setVisible(false);
          jTextField4.setVisible(false);
          jTextField5.setVisible(false);
          jTextField6.setVisible(false);
          jTextField7.setVisible(false);
          jTextField8.setVisible(false);
          jTextField9.setVisible(false);
          jTextField10.setVisible(false);
          jTextField11.setVisible(false);

     new Thread(new Runnable() {
     public void run() {
                        try {
                              System.out.println("anee");
int txtNum = 1;

int a3 =  + 1;
                            System.out.println("tatnum = "+txtNum);
//txtNum = txtNum+1;
System.out.println(txtNum <= 10);
while(txtNum <= 10){
    if(txtNum== 1){
a3 = +1;
    }else if(txtNum == 10){
        a3 = -1;
    }

txtNum = txtNum  + a3;
prg1.setMaximum(txtNum);
    System.out.println("abc"+txtNum);
                            for (int i = 0; i < 3; i++) {
                                Thread.sleep(30);
                             }
  switch(txtNum){
        case 1 :
           MyThread1();
        break;
         case 2 :
             MyThread2();
        break;
         case 3 :
             MyThread3();
        break;
         case 4 :
             MyThread4();
        break;
         case 5 :MyThread5();
        break;

         case 6 :MyThread6();
        break;
         case 7 :MyThread7();
        break;
         case 8 :MyThread8();
        break;
        case 9 :MyThread9();
        break;
         case 10 :MyThread10();
        break;

    }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();
   

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try {
            // getting data points and set the table
            locationNo1 = cmbFrom1.getSelectedItem().toString().split("-")[1];
            System.out.println(locationNo1);
            locationNo2 = cmbTo1.getSelectedItem().toString().split("-")[1];
            System.out.println(locationNo2);

            String query = "SELECT * FROM dpvalues WHERE location >= '"+locationNo1+"'AND location < '"+locationNo2+"'";
            Connection conn = DBConnector.getMyConnection();
            ResultSet rs1 = conn.createStatement().executeQuery(query);
            System.out.println(rs1.next());
            DefaultTableModel dt = (DefaultTableModel) jTable1.getModel();
            while(dt.getRowCount()>0){
               dt.removeRow(0);
               }
            while(rs1.next()){
                Vector v = new Vector();
                v.add(rs1.getString("dpname"));
                v.add(rs1.getString("long"));
                v.add(rs1.getString("latd"));

                dt.addRow(v);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed


        new Thread(new Runnable() {

            public void run() {



                try {

                    Double spot1 = 0.00;
                    Double Speed = 0.0;
                    while(a1<8){
                        System.out.println(a1);
                        String query = "SELECT * FROM mess WHERE time1 = '"+a1+"'";
                        Connection connThread = DBConnector.getMyConnection();
                        ResultSet rs1 = connThread.createStatement().executeQuery(query);
                        while(rs1.next()){
                            String CabNo = rs1.getString("cabno");
                            String Longt = rs1.getString("long");
                            String Latdt = rs1.getString("latd");
                            //calculating Spot
                            Double DubLongt = Double.parseDouble(Longt);
                            Double DubLatdt = Double.parseDouble(Latdt);
                            Double Spot = (DubLongt + DubLatdt)/2;
                            System.out.println(CabNo);
                            System.out.println(Spot);

                            if(a1>1){
                                Speed = (Spot - spot1)/10;
                            }
                            spot1 = Spot;
                            String query1 = "UPDATE speed SET longt = '"+Longt+"', latd = '"+Latdt+"',point = '"+Spot+"', speed = '"+Speed+"' WHERE cab_no = '"+CabNo+"'";
                            connThread.createStatement().executeUpdate(query1);
                        }
                        a1= a1+1;
                        Thread.sleep(5000);

                    }
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }).start();



    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        SerialModemGateway gateway = new SerialModemGateway("modem.com1", "COM4", 460800, "Huawei", "");
        gateway.setInbound(true);
        gateway.setOutbound(true);
        gateway.setSmscNumber("+9477000003");
        Service service = Service.getInstance();
        try {
            service.addGateway(gateway);
            service.startService();
            {
                System.out.println("Modem Information");
                System.out.println("Manufacturer: "+ gateway.getManufacturer());
                System.out.println("Model: "+ gateway.getModel());
                System.out.println("Serial No:"+ gateway.getSerialNo());
                System.out.println("SIM IMSI:"+ gateway.getImsi());
                System.out.println("");

            }
            OutboundMessage msg = new OutboundMessage(txtSendNum.getText(), txtMessage.getText());
            service.sendMessage(msg);
            JOptionPane.showConfirmDialog(this, "Sent!");
        } catch (Exception ex) {
        JOptionPane.showConfirmDialog(this, "Not Sent!\n"+ex.getMessage());

        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtAvgSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvgSpeedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvgSpeedActionPerformed

    /**
    * @param args the command line arguments
    */

     void mySms(){
Double Speed =Double.parseDouble(txtAvgSpeed.getText());
//smsSender sms = new smsSender();
//sms.setVisible(true);

        if(Speed<0.15){
         txtMessage.setText("Speed is "+Speed+"Do not usethis path");

        }else if(Speed>0.15){
         txtMessage.setText("Speed is "+Speed+" no traffic");
        }




        DialogMeaasge.setSize(500, 400);
final Toolkit toolkit = Toolkit.getDefaultToolkit();
final Dimension screenSize = toolkit.getScreenSize();
final int x = (screenSize.width - DialogMeaasge.getWidth()) / 2;
final int y = (screenSize.height - DialogMeaasge.getHeight()) / 2;
DialogMeaasge.setLocation(x, y);
DialogMeaasge.setVisible(true);
}
   public void MyThread1(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField1.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                                Thread.sleep(60);
                             }
                            jTextField1.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread2(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField3.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                                Thread.sleep(60);
                             }
                            jTextField3.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread3(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField4.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                               Thread.sleep(60);
                             }
                            jTextField4.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread4(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField5.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                            Thread.sleep(60);
                             }
                            jTextField5.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread5(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField6.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                             Thread.sleep(60);
                             }
                            jTextField6.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread6(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField7.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                               Thread.sleep(60);
                             }
                            jTextField7.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread7(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField8.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                                Thread.sleep(60);
                             }
                            jTextField8.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread8(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField9.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                              Thread.sleep(60);
                             }
                            jTextField9.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread9(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField10.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                              Thread.sleep(60);
                             }
                            jTextField10.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}
public void MyThread10(){
     new Thread(new Runnable() {
     public void run() {
                        try {
                            System.out.println("aiyooo");
                            jTextField11.setVisible(true);
                            for (int i = 0; i < 3; i++) {
                              Thread.sleep(60);
                             }
                            jTextField11.setVisible(false);

                            System.out.println("ammo");

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
}
                }).start();



}

    public void setDisplayToFitMapMarkers() {
        if (mapMarkerList == null || mapMarkerList.size() == 0)
            return;
        int x_min = Integer.MAX_VALUE;
        int y_min = Integer.MAX_VALUE;
        int x_max = Integer.MIN_VALUE;
        int y_max = Integer.MIN_VALUE;
        int mapZoomMax = tileSource.getMaxZoom();
        for (MapMarker marker : mapMarkerList) {
            int x = OsmMercator.LonToX(marker.getLon(), mapZoomMax);
            int y = OsmMercator.LatToY(marker.getLat(), mapZoomMax);
            x_max = Math.max(x_max, x);
            y_max = Math.max(y_max, y);
            x_min = Math.min(x_min, x);
            y_min = Math.min(y_min, y);
        }
        int height = Math.max(0, getHeight());
        int width = Math.max(0, getWidth());
        // System.out.println(x_min + " < x < " + x_max);
        // System.out.println(y_min + " < y < " + y_max);
        // System.out.println("tiles: " + width + " " + height);
        int newZoom = mapZoomMax;
        int x = x_max - x_min;
        int y = y_max - y_min;
        while (x > width || y > height) {
            // System.out.println("zoom: " + zoom + " -> " + x + " " + y);
            newZoom--;
            x >>= 1;
            y >>= 1;
        }
        x = x_min + (x_max - x_min) / 2;
        y = y_min + (y_max - y_min) / 2;
        int z = 1 << (mapZoomMax - newZoom);
        x /= z;
        y /= z;
        setDisplayPosition(x, y, newZoom);
    }

    public void setDisplayPosition(int x, int y, int zoom) {
        setDisplayPosition(new Point(getWidth() / 2, getHeight() / 2), x, y, zoom);
    }

    public void setDisplayPosition(Point mapPoint, int x, int y, int zoom) {
        if (zoom > tileSource.getMaxZoom() || zoom < MIN_ZOOM)
            return;

        // Get the plain tile number
//        Point p = new Point();
//        p.x = x - mapPoint.x + getWidth() / 2;
//        p.y = y - mapPoint.y + getHeight() / 2;
//        center = p;
//        setIgnoreRepaint(true);
//        try {
//            int oldZoom = this.zoom;
//            this.zoom = zoom;
//            if (oldZoom != zoom)
//                zoomChanged(oldZoom);
//            if (zoomSlider.getValue() != zoom)
//                zoomSlider.setValue(zoom);
//        } finally {
//            setIgnoreRepaint(false);
//            repaint();
//        }
    }

    //Calculation of the Cost
    public void getCost(){
    if(Double.parseDouble(txtAvgSpeed.getText())>40.0){
    
    }
    return;
    }


    public static void main(String args[]) {
        try {

            Mongo mongo = new Mongo("localhost", 27017);
            DB db = mongo.getDB("trafficMongo");
            DBCollection collection = db.getCollection("cabno1");
            //System.out.println(collection.toString());
            System.out.println("Done");

        } catch (Exception e) {
            e.printStackTrace();
        }

       try {

			//UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                       UIManager.setLookAndFeel(new SyntheticaBlackMoonLookAndFeel());

			} catch (Exception evt) {}

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cabSpeed().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog DialogMeaasge;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cmbFrom1;
    private javax.swing.JComboBox cmbTo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JProgressBar prg1;
    private javax.swing.JTextField txtAvgSpeed;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtDistance;
    private javax.swing.JTextField txtFromLatd;
    private javax.swing.JTextField txtFromLong;
    private javax.swing.JTextArea txtMessage;
    private javax.swing.JTextField txtRout;
    private javax.swing.JTextField txtSendNum;
    private javax.swing.JTextField txtToLatd;
    private javax.swing.JTextField txtToLong;
    // End of variables declaration//GEN-END:variables
}
